"use strict";(self.webpackChunkeasybutton_docs=self.webpackChunkeasybutton_docs||[]).push([[93],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},8882:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"on-pressed-for-api","title":"onPressedFor","description":"Event","source":"@site/docs/on-pressed-for-api.md","sourceDirName":".","slug":"/on-pressed-for-api","permalink":"/docs/on-pressed-for-api","draft":false,"unlisted":false,"editUrl":"https://github.com/evert-arias/easybutton-website/docs/on-pressed-for-api.md","tags":[],"version":"current","frontMatter":{"id":"on-pressed-for-api","title":"onPressedFor","sidebar_label":"onPressedFor"},"sidebar":"api","previous":{"title":"onPressed","permalink":"/docs/on-single-press-api"},"next":{"title":"onSequence","permalink":"/docs/on-sequence-api"}}');var r=t(4848),o=t(8453);const i={id:"on-pressed-for-api",title:"onPressedFor",sidebar_label:"onPressedFor"},a=void 0,d={},l=[{value:"Description",id:"description",level:2},{value:"External interrupts",id:"external-interrupts",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Event"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Triggers a callback function when the Button has been pressed and hold for at least the given duration time. This method takes two parameters as arguments. The first argument is the duration in milliseconds and the second is the callback function to be called."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"int duration = 2000;\n\nbutton.onPressedFor(duration, onPressedCallback);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"external-interrupts",children:"External interrupts"}),"\n",(0,r.jsxs)(n.p,{children:["When the button is being interfaced with microcontroller through external interrupts and you need to use this feature, method ",(0,r.jsx)(n.code,{children:"update"})," must be called inside ",(0,r.jsx)(n.code,{children:"loop"})," function as shown below."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"void loop() {\n  // update() function must be called repeatedly only if onPressedFor functionality is being used and interrupt is enabled\n  button.update();\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.p,{children:["Please refer to the ",(0,r.jsx)(n.a,{href:"on-pressed-for-duration-example",children:"Pressed For Duration"})," example included in this documentation."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);