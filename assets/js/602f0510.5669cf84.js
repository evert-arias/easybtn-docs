"use strict";(self.webpackChunkeasybutton_docs=self.webpackChunkeasybutton_docs||[]).push([[579],{4750:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"fundamentals","title":"Fundamentals","description":"Including the Library","source":"@site/docs/fundamentals.md","sourceDirName":".","slug":"/fundamentals","permalink":"/easybtn-docs/docs/fundamentals","draft":false,"unlisted":false,"editUrl":"https://github.com/evert-arias/easybtn-docs/docs/fundamentals.md","tags":[],"version":"current","frontMatter":{"id":"fundamentals","title":"Fundamentals","sidebar_label":"Fundamentals"},"sidebar":"docs","previous":{"title":"Poll vs External Interrupts","permalink":"/easybtn-docs/docs/poll-vs-external-interrupts"}}');var l=n(4848),r=n(8453);const i={id:"fundamentals",title:"Fundamentals",sidebar_label:"Fundamentals"},a=void 0,c={},d=[{value:"Including the Library",id:"including-the-library",level:2},{value:"EasyButton Class",id:"easybutton-class",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Initializing a button",id:"initializing-a-button",level:2},{value:"Update Button State",id:"update-button-state",level:2},{value:"Poll",id:"poll",level:3},{value:"External interrupts",id:"external-interrupts",level:3},{value:"Callbacks",id:"callbacks",level:2}];function o(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.h2,{id:"including-the-library",children:"Including the Library"}),"\n",(0,l.jsx)(t.p,{children:"Once the library has been installed, you may include it as shown below."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:"#include <EasyButton.h>\n"})}),"\n",(0,l.jsx)(t.h2,{id:"easybutton-class",children:"EasyButton Class"}),"\n",(0,l.jsxs)(t.p,{children:["The library exposes the ",(0,l.jsx)(t.strong,{children:"EasyButton"})," class. Create an instance of the class for every button that you have connected."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:"#define PWR_BTN_PIN 26\n\n#define RST_BTN_PIN 27\n\nEasyButton powerButton(PWR_BTN_PIN);\n\nEasyButton resetButton(RST_BTN_PIN);\n"})}),"\n",(0,l.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,l.jsx)(t.p,{children:"The following arguments can be passed to the class constructor."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:"#define PWR_BTN_PIN 26\n\nuint8 debounce = 40;\n\nbool pullup = false;\n\nbool invert = false;\n\nEasyButton powerButton(PWR_BTN_PIN, debounce, pullup, invert);\n"})}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"Argument"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"Data Type"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"Required?"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"Default Value"}),(0,l.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"pin"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"uint8_t"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"yes"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"n/a"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"Arduino pin number where the button is connected."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"debounce_time"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"uint32_t"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"no"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"35"}),(0,l.jsxs)(t.td,{style:{textAlign:"center"},children:["Period of time to make sure the pushbutton is definitely pressed. Please refer to ",(0,l.jsx)(t.a,{href:"https://www.arduino.cc/en/tutorial/debounce",children:"debounce"}),"."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"pullup_enable"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"bool"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"no"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"true"}),(0,l.jsxs)(t.td,{style:{textAlign:"center"},children:["Enable internal pullup resistor. Please refer to ",(0,l.jsx)(t.a,{href:"https://www.arduino.cc/en/Tutorial/DigitalPins",children:"digital pins"}),". If using ESP32, please see the note below."]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"invert"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"bool"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"no"}),(0,l.jsx)(t.td,{style:{textAlign:"center"},children:"true"}),(0,l.jsxs)(t.td,{style:{textAlign:"center"},children:["Invert button logic. If true, low = pressed else high = pressed. Please refer to ",(0,l.jsx)(t.a,{href:"https://www.arduino.cc/en/Tutorial/Invert",children:"invert"}),"."]})]})]})]}),"\n",(0,l.jsx)(t.admonition,{title:"Note",type:"note",children:(0,l.jsxs)(t.p,{children:["If using ",(0,l.jsx)(t.strong,{children:"ESP32"}),", be aware that some of the pins does not have software ",(0,l.jsx)(t.strong,{children:"pull-up"}),"/",(0,l.jsx)(t.strong,{children:"pull-down"})," functionalities. In that case, use an external pull-up resistor, 10K works well. Please refer to ",(0,l.jsx)(t.a,{href:"https://learn.sparkfun.com/tutorials/pull-up-resistors",children:"Pull-up Resistors"}),"."]})}),"\n",(0,l.jsx)(t.h2,{id:"initializing-a-button",children:"Initializing a button"}),"\n",(0,l.jsxs)(t.p,{children:["Initialize the button by calling the method ",(0,l.jsx)(t.code,{children:"begin"})," within the ",(0,l.jsx)(t.code,{children:"setup"})," function."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:"void setup() {\n    powerButton.begin();\n}\n"})}),"\n",(0,l.jsx)(t.h2,{id:"update-button-state",children:"Update Button State"}),"\n",(0,l.jsx)(t.h3,{id:"poll",children:"Poll"}),"\n",(0,l.jsx)(t.p,{children:"Continuously read the state of the button."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:"void loop() {\n    powerButton.read();\n}\n"})}),"\n",(0,l.jsx)(t.h3,{id:"external-interrupts",children:"External interrupts"}),"\n",(0,l.jsx)(t.p,{children:"Defining interruption service routine"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:"void buttonISR()\n{\n  //When button is being used through external interrupts, parameter INTERRUPT must be passed to read() function\n  powerButton.read(INTERRUPT); \n}\n"})}),"\n",(0,l.jsx)(t.p,{children:"Enabling external interrupt"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:"if (powerButton.supportsInterrupt())\n  {\n    powerButton.enableInterrupt(buttonISR);\n  }\n"})}),"\n",(0,l.jsx)(t.h2,{id:"callbacks",children:"Callbacks"}),"\n",(0,l.jsx)(t.p,{children:"EasyButton allows you to attach callback functions to certain button events. Use callback functions to run specific code when the event gets triggered. Attach callback functions within the setup function."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:'void onPressed() {\n  Serial.println("Power button has been pressed!");\n}\n\nvoid setup() {\n    // onPressed function will be called when the onPressed event of the button gets triggered.\n    powerButton.onPressed(onPressed);\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const l={},r=s.createContext(l);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);