"use strict";(self.webpackChunkeasybutton_docs=self.webpackChunkeasybutton_docs||[]).push([[613],{599:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"on-pressed-for-duration-example","title":"Pressed For Duration","description":"The following example demostrate how to detect when a button has been pressed for a given time.","source":"@site/docs/on-pressed-for-example.md","sourceDirName":".","slug":"/on-pressed-for-duration-example","permalink":"/docs/on-pressed-for-duration-example","draft":false,"unlisted":false,"editUrl":"https://github.com/evert-arias/easybutton-website/docs/on-pressed-for-example.md","tags":[],"version":"current","frontMatter":{"id":"on-pressed-for-duration-example","title":"Pressed For Duration","sidebar_label":"Pressed For Duration"},"sidebar":"examples","previous":{"title":"Single Press","permalink":"/docs/on-single-press-example"},"next":{"title":"Detecting Sequence","permalink":"/docs/on-sequence-example"}}');var r=t(4848),s=t(8453);const a={id:"on-pressed-for-duration-example",title:"Pressed For Duration",sidebar_label:"Pressed For Duration"},i=void 0,d={},u=[];function l(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The following example demostrate how to detect when a button has been pressed for a given time."}),"\n",(0,r.jsxs)(n.p,{children:["Download ",(0,r.jsx)(n.a,{href:"https://github.com/evert-arias/EasyButton/blob/master/examples",children:"source code"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <EasyButton.h>\n\n// Arduino pin number where the button is connected.\n#define BUTTON_PIN 26\n\n// Duration.\nint duration = 2000;\n\n// Button.\nEasyButton button(BUTTON_PIN);\n\n// Callback.\nvoid onPressedForDuration() {\n    Serial.println("Button has been pressed for the given duration!");\n}\n\nvoid setup() {\n    Serial.begin(115200);\n\n  \t// Initialize the button.\n  \tbutton.begin();\n\n  \t// Attach callback.\n  \tbutton.onPressedFor(duration, onPressedForDuration);\n}\n\nvoid loop() {\n    // Continuously update the button state.\n  \tbutton.read();\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"Work on progress",type:"important",children:(0,r.jsx)(n.p,{children:"We are currently working on this section."})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(6540);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);